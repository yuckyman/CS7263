{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/k-gram-indexes-for-wildcard-queries-1.html",
  "title": "k-gram indexes for wildcard queries",
  "body": "\n\n\n\n\nk-gram indexes for wildcard queries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Spelling correction\n Up: Wildcard queries\n Previous: Permuterm indexes\n    Contents \n    Index\n\n\n\n\n \n\nk-gram indexes for wildcard queries\n\n\nWhereas the permuterm index is simple, it can lead to a\nconsiderable blowup from the number of rotations per term; for\na dictionary of English terms, this can represent an almost\nten-fold space increase.  We now present a second technique,\nknown as the -gram index, for processing wildcard\nqueries.  We will also use -gram indexes in Section 3.3.4 .\nA -gram is a sequence of  characters. Thus cas, ast and stl are all 3-grams occurring in the term castle. We use a special character $ to denote the beginning or end of a term, so the full set of 3-grams generated for castle is: $ca, cas, ast, stl, tle, le$.\n\n\nIn a  -gram index , the dictionary contains all -grams that occur in any term in the\nvocabulary. Each postings list points from a -gram to all\nvocabulary terms containing that -gram. For instance, the\n3-gram etr would point to vocabulary terms such as\nmetric and retrieval. An example is given in\nFigure 3.4 .\n\n\n\n\n\n\nHow does such an index help us with wildcard queries? Consider the wildcard query re*ve. We are seeking documents containing any term that begins with re and ends with ve. Accordingly, we run the Boolean query $re AND ve$. This is looked up in the 3-gram index and yields a list of matching terms such as relive, remove and retrieve. Each of these matching terms is then looked up in the standard inverted index to yield documents matching the query.\n\n\nThere is however a difficulty with the use of -gram indexes, that demands one further step of processing. Consider using the 3-gram index described above for the query red*. Following the process described above, we first issue the Boolean query $re AND red to the 3-gram index. This leads to a match on terms such as retired, which contain the conjunction of the two 3-grams $re and red, yet do not match the original wildcard query red*.\n\n\nTo cope with this, we introduce a post-filtering step, in which the terms enumerated by the Boolean query on the 3-gram index are checked individually against the original query red*. This is a simple string-matching operation and weeds out terms such as retired that do not match the original query. Terms that survive are then searched in the standard inverted index as usual.\n\n\nWe have seen that a wildcard query can result in multiple terms being enumerated, each of which becomes a single-term query on the standard inverted index. Search engines do allow the combination of wildcard queries using Boolean operators, for example, re*d AND fe*ri. What is the appropriate semantics for such a query? Since each wildcard query turns into a disjunction of single-term queries, the appropriate interpretation of this example is that we have a conjunction of disjunctions: we seek all documents that contain any term matching re*d and any term matching fe*ri.\n\n\nEven without Boolean combinations of wildcard queries, the processing of a wildcard query can be quite expensive, because of the added lookup in the special index, filtering and finally the standard inverted index. A search engine may support such rich functionality, but most commonly, the capability is hidden behind an interface (say an ``Advanced Query'' interface) that most users never use. Exposing such functionality in the search interface often encourages users to invoke it even when they do not require it (say, by typing a prefix of their query followed by a *), increasing the processing load on the search engine.\n\n\nExercises.\n\nIn the permuterm index, each permuterm vocabulary term\npoints to the original vocabulary term(s) from which it was\nderived. How many original vocabulary terms can there be in\nthe postings list of a permuterm vocabulary term?\n\n\n\nWrite down the entries in the permuterm index dictionary that are generated by the term mama.\n\n\n\nIf you wanted to search for s*ng in a permuterm wildcard index, what key(s) would one do the lookup on?\n\n\n\nRefer to Figure 3.4 ; it is pointed out in the caption that the vocabulary terms in the postings are lexicographically ordered.  Why is this ordering useful?\n\n\n\nConsider again the query fi*mo*er from\nSection 3.2.1 . What Boolean query on a bigram index\nwould be generated for this query? Can you think of a term\nthat matches the permuterm query in Section 3.2.1 , but does not satisfy this Boolean query?\n\n\n\nGive an example of a sentence that falsely matches\nthe wildcard query mon*h if the search were to simply use a\nconjunction of bigrams.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Spelling correction\n Up: Wildcard queries\n Previous: Permuterm indexes\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}