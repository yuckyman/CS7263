{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/dictionary-compression-1.html",
  "title": "Dictionary compression",
  "body": "\n\n\n\n\nDictionary compression\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Dictionary as a string\n Up: Index compression\n Previous: Zipf's law: Modeling the\n    Contents \n    Index\n\n\n\n\n \n\nDictionary compression\n\n\nThis section presents a series of dictionary data structures\nthat achieve increasingly higher compression ratios. The\ndictionary is small compared with the postings file as \nsuggested by Table 5.1 .\nSo why compress it if it is\nresponsible for only a small percentage of the overall space\nrequirements of the IR system?\n\n\nOne of the primary factors in determining the\nresponse time of an IR system is the number of disk seeks necessary to\nprocess a query. If parts of the dictionary are on disk,\nthen many more disk seeks are necessary in query evaluation.\nThus, the main goal of compressing the dictionary is to fit it in\nmain memory, or at least a large portion of it, to\nsupport high query throughput.  \nAlthough dictionaries of very large\ncollections fit into the memory of a standard\ndesktop machine, this is not true of many other application\nscenarios.  For example, an enterprise search server for a\nlarge corporation may have to index a multiterabyte\ncollection with a comparatively large vocabulary because of\nthe presence of documents in many different languages.  We\nalso want to be able to design search systems for limited\nhardware such as mobile phones and onboard computers. Other\nreasons for wanting to conserve memory are fast startup time\nand having to share resources with other applications. The\nsearch system on your PC must get along with the\nmemory-hogging word processing suite you are using at the\nsame time.\n\n\n\n\nFigure 5.3:\n\nStoring the dictionary as an array of fixed-width entries.\n\n\n\n\n\n\n\n\nSubsections\n\nDictionary as a string\nBlocked storage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Dictionary as a string\n Up: Index compression\n Previous: Zipf's law: Modeling the\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}