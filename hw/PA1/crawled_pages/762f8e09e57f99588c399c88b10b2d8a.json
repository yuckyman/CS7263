{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/putting-it-all-together-1.html",
  "title": "Putting it all together",
  "body": "\n\n\n\n\nPutting it all together\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Vector space scoring and\n Up: Components of an information\n Previous: Designing parsing and scoring\n    Contents \n    Index\n\n\n\n\n \n\nPutting it all together\n \nWe have now studied all the components necessary for a basic search system that supports free text queries as well as Boolean, zone and field queries.  We briefly review how the various pieces fit together into an overall system; this is depicted in Figure 7.5 .\n\n\n\n\nA complete search system.Data paths are shown primarily for a free text query.\n\n\n\nIn this figure, documents stream in from the left for\nparsing and linguistic processing (language and format\ndetection, tokenization and stemming).  The resulting stream\nof tokens feeds into two modules.  First, we retain a copy\nof each parsed document in a document cache.  This will\nenable us to generate  results snippets :\nsnippets of text accompanying each document in the results\nlist for a query.  This snippet tries to give a succinct\nexplanation to the user of why the document matches the\nquery.  The automatic generation of such snippets is the\nsubject of Section 8.7 .  A second copy of the tokens\nis fed to a bank of indexers that create a bank of indexes\nincluding zone and field indexes that store the metadata for\neach document, (tiered) positional indexes, indexes for\nspelling correction and other tolerant retrieval, and structures for accelerating inexact top- retrieval.  A free text user query (top center) is sent down to the indexes both directly and through a module for generating spelling-correction candidates.  As noted in Chapter 3  the latter may optionally be invoked only when the original query fails to retrieve enough results.  Retrieved documents (dark arrow) are passed to a scoring module that computes scores based on machine-learned ranking (MLR), a technique that builds on Section 6.1.2  (to be further developed in Section 15.4.1 ) for scoring and ranking documents.  Finally, these ranked documents are rendered as a results page.\n\n\nExercises.\n\nExplain how the postings intersection algorithm first introduced in Section 1.3  can be adapted to find the smallest integer  that contains all query terms.\n\n\n\nAdapt this procedure to work when not all query terms are present in a document.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Vector space scoring and\n Up: Components of an information\n Previous: Designing parsing and scoring\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}