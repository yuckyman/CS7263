{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/basic-xml-concepts-1.html",
  "title": "Basic XML concepts",
  "body": "\n\n\n\n\nBasic XML concepts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Challenges in XML retrieval\n Up: XML retrieval\n Previous: XML retrieval\n    Contents \n    Index\n\n\n\n\n \n\nBasic XML concepts\n\n\n\nFigure 10.1:\nAn XML document.\n\n\n\nAn XML document is an ordered, labeled\ntree. Each node of the tree is an  XML element  and is written with an opening and\nclosing  tag . An element can have one or more\n XML attributes .\nIn the\nXML document in\nFigure 10.1 , the scene element is enclosed by\nthe two tags <scene ...> and\n</scene>. It\nhas an attribute\nnumber with value vii and two child elements,\ntitle and verse.\n\n\n\n\nFigure 10.2:\nThe XML document in Figure 10.1  as a\n  simplified DOM object.\n\n\n\n\nFigure 10.2  shows Figure 10.1  as a tree.\nThe leaf nodes of the tree\nconsist of text, e.g., Shakespeare, Macbeth, and\nMacbeth's castle. The tree's internal nodes\nencode either\nthe structure of the document\n(title, act, and scene) or\n metadata  functions\n(author).\n\n\nThe standard for accessing and processing XML\ndocuments is the XML Document Object Model or  DOM . The DOM represents elements, attributes and text within\nelements as\nnodes in a tree. Figure 10.2  is a simplified DOM representation of\nthe XML document in Figure 10.1 .With a DOM API, we can process an\nXML document by starting at the root element and then\ndescending down the tree from parents to children.\n\n\n XPath  is a standard for enumerating paths in an XML\ndocument collection.\nWe will also refer to paths as \n XML contexts  \nor simply  contexts  \nin\nthis chapter. Only a small subset of XPath is needed for our purposes.\nThe\nXPath expression node selects all nodes of that name.\nSuccessive elements of a path are separated by slashes, so\nact/scene selects all scene elements whose\nparent is an act element.\nDouble slashes indicate that an arbitrary number of elements\ncan intervene on a  path:\nplay//scene selects all scene elements\noccurring in a play element. In Figure 10.2 \nthis set consists of a single scene element, which is accessible via\nthe path\nplay,\nact,\nscene from the top. An initial slash starts the path\nat the root element.\n/play/title selects the play's title in\nFigure 10.1 ,\n/play//title selects a set with two members (the play's title and the scene's\ntitle), and\n/scene/title selects no elements. For notational convenience, we\nallow the final element of a path to be a vocabulary term and\nseparate it from the element path by the symbol #, even\nthough this does not conform to the XPath standard. For example, title#\"Macbeth\"\nselects all titles containing the term Macbeth.\n\n\nWe also need the concept of  schema  in this\nchapter. A schema puts constraints on the structure of\nallowable XML documents for a particular application. A\nschema for Shakespeare's plays may stipulate that scenes can\nonly occur as children of acts and that only acts and scenes\nhave the number attribute.\nTwo standards for schemas for XML documents are\n XML DTD  (document type definition) and\n XML Schema .\nUsers can only write structured queries for an XML retrieval system\nif they have some minimal knowledge about the schema of the\ncollection.\n\n\n\n\nFigure 10.3:\nAn XML query in NEXI format and its partial\n  representation as a tree.\n\n\n\n\nA common format for XML queries is\n NEXI  (Narrowed Extended XPath I). We give an example\nin Figure 10.3 .\nWe display the query on four lines for typographical\nconvenience, but it is intended to be read as one unit\nwithout line breaks. In\nparticular, //section is embedded under //article.\n\n\nThe query \nin Figure 10.3 \nspecifies a search for\nsections about the\nsummer holidays that are part of\narticles from 2001 or 2002.\nAs in XPath\ndouble slashes indicate that an arbitrary number of elements\ncan intervene on a  path.\nThe dot in a clause in square brackets refers to the element\nthe clause modifies.\nThe clause [.//yr = 2001 or .//yr = 2002] modifies //article.\nThus,\nthe dot refers to\n//article in this case.\nSimilarly, the dot in\n[about(., summer holidays)]\nrefers to the section that the clause modifies.\n\n\nThe two yr conditions are\nrelational attribute constraints. Only articles whose yr\nattribute is 2001 or 2002 (or that contain an element whose\nyr attribute is 2001 or 2002) are to be considered.\nThe about clause is a ranking constraint: Sections\nthat occur in the right type of article\nare to be ranked according\nto how relevant they are to the topic summer\nholidays.\n\n\n\n\nFigure 10.4:\nTree representation of XML documents and queries.\n\n\n\n\nWe usually handle relational attribute constraints by prefiltering or\npostfiltering: We simply exclude all elements from the\nresult set that do not meet the relational attribute constraints.  In\nthis chapter, we will not address how to do this efficiently\nand instead focus on the core information retrieval problem\nin XML retrieval, namely how to rank documents according to the\nrelevance criteria expressed in the about conditions of the NEXI\nquery.\n\n\nIf we discard relational attributes, we can represent documents\nas trees with only one type of node: element nodes. In other\nwords, we remove all attribute nodes from the XML document,\nsuch as the number attribute in\nFigure 10.1 . Figure 10.4  shows a subtree of\nthe document in Figure 10.1  as an element-node tree\n(labeled ). \n\n\nWe can represent queries as trees in the same way. This is a\n query-by-example  approach to query language\ndesign because users pose queries by creating objects that\nsatisfy the same formal description as documents. In Figure 10.4 ,\n is a search\nfor books whose titles score highly for the keywords Julius Caesar.  is a\nsearch for books whose author elements score highly for\nJulius Caesar and whose title elements score highly\nfor Gallic war.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Challenges in XML retrieval\n Up: XML retrieval\n Previous: XML retrieval\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}