{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/tiered-indexes-1.html",
  "title": "Tiered indexes",
  "body": "\n\n\n\n\nTiered indexes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Query-term proximity\n Up: Components of an information\n Previous: Components of an information\n    Contents \n    Index\n\n\n\n\n \n\nTiered indexes\n \nWe mentioned in Section 7.1.2  that when using heuristics such as index elimination for inexact top- retrieval, we may occasionally find ourselves with a set  of contenders that has fewer than  documents.  A common solution to this issue is the user of  tiered indexes , which may be viewed as a generalization of  champion lists .  We illustrate this idea in Figure 7.4 , where we represent the documents and terms of Figure 6.9 .  In this example we set a tf threshold of 20 for tier 1 and 10 for tier 2, meaning that the tier 1 index only has postings entries with tf values exceeding 20, while the tier 2 index only has postings entries with tf values exceeding 10.  In this example we have chosen to order the postings entries within a tier by document ID.\n\n\n\n\nTiered indexes.If we fail to get  results from tier 1, query processing ``falls back'' to tier 2, and so on.  Within each tier, postings are ordered by document ID.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Query-term proximity\n Up: Components of an information\n Previous: Components of an information\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}