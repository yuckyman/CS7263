{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/xml-retrieval-1.html",
  "title": "XML retrieval",
  "body": "\n\n\n\n\nXML retrieval\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Basic XML concepts\n Up: irbook\n Previous: References and further reading\n    Contents \n    Index\n\n\n\n\n\nXML retrieval\n\n\nInformation retrieval systems are often contrasted with\nrelational databases. Traditionally, IR systems have retrieved information from\nunstructured text - by which we mean ``raw'' text\nwithout markup. Databases are designed for querying\nrelational data: sets of records that have values for\npredefined attributes such as employee number, title and\nsalary.  There are fundamental differences between\ninformation retrieval and database systems in terms of\nretrieval model, data structures and query language as shown\nin Table 10.1 .\n\n\n\n\n \nRDB search\nunstructured retrieval\nstructured\nretrieval\n\nobjects\nrecords\nunstructured documents\ntrees with text at\nleaves\n\nmodel\nrelational model\nvector space & others\n?\n\nmain data structure\ntable\ninverted index\n?\n\nqueries\nSQL\nfree text queries\n?\n\n\nRDB (relational database) search, unstructured\n  information retrieval and\nstructured information retrieval.\nThere is no consensus yet as to which \nmethods work best for\nstructured\nretrieval although many researchers believe that XQuery\n(page 10.5 )\nwill become the standard for structured queries.\n\n \n\n\n\nSome highly structured text search problems are most\nefficiently handled by\na relational database, for example, if the\nemployee table contains an attribute for short textual job\ndescriptions and you want to find all employees who are\ninvolved with invoicing.  In this case, the SQL query:\n\nselect lastname from employees where job_desc like 'invoic%';\n\nmay be sufficient to satisfy your information need with high\nprecision and recall.\n\n\nHowever, many structured data sources containing text\nare best modeled as structured documents rather than\nrelational data.  We call the search over such structured\ndocuments   structured retrieval . Queries in\nstructured retrieval can be either structured or\nunstructured, but we will assume in this chapter that the\ncollection consists only of structured documents.\nApplications of\nstructured retrieval include  digital\nlibraries ,  patent databases ,   , text in which\nentities  like persons and locations have been tagged\n(in a process called \n  )\nand output from office\nsuites like OpenOffice that save documents as marked up\ntext. In all of these applications, we want to be able to\nrun queries that combine textual criteria with structural\ncriteria.\nExamples of such queries are\ngive me a full-length article on fast fourier\n  transforms (digital libraries),\ngive me patents whose claims mention RSA public key\n  encryption and that cite US patent 4,405,829 (patents), or\ngive me articles about sightseeing tours of \nthe Vatican and the Coliseum (entity-tagged text).\nThese three queries are  structured queries that\ncannot be answered well by an unranked retrieval system. As we argued in\nwestlaw unranked retrieval models like the\nBoolean model suffer from low recall.\nFor instance, an unranked system would return a\npotentially large number of articles that mention\nthe Vatican, the Coliseum and sightseeing tours without ranking the ones that are most\nrelevant for the query first. Most users are also\nnotoriously bad at precisely stating structural\nconstraints. For instance, users may not know for which\nstructured elements the search system supports search.\nIn our\nexample, the user may be unsure whether to issue the query\nas sightseeing AND\n(COUNTRY:Vatican\nOR\nLANDMARK:Coliseum)\n, as\nsightseeing AND\n(STATE:Vatican\nOR\nBUILDING:Coliseum)\n or in some other form.\nUsers may also be completely unfamiliar with structured search and\nadvanced search interfaces or unwilling to use them.\nIn this chapter, we look at how ranked retrieval methods\ncan be adapted to structured\ndocuments to address these problems.\n\n\nWe will only look at one standard for encoding structured documents:\n Extensible Markup Language \nor  XML , which is\ncurrently the most widely used such standard.\nWe will not cover\nthe specifics that distinguish XML from other types of markup\nsuch as HTML and SGML. But most of what we say in this\nchapter is applicable to\nmarkup languages in general.\n\n\nIn the context of information retrieval, we are only\ninterested in XML as a language for encoding text and\ndocuments. A perhaps more widespread use of\nXML is to encode non-text data. For example, we may want to\nexport data in XML format from an enterprise\nresource planning system and then read them into an\nanalytics program to produce graphs for a presentation.\nThis type of application of XML is called\n data-centric \nbecause\n numerical and\nnon-text attribute-value data dominate and text is usually a small\nfraction of the overall data. Most data-centric XML is\nstored in databases - in contrast to the\ninverted index-based methods for text-centric XML that we present in this chapter.\n\n\nWe call XML retrieval \nstructured retrieval in this chapter.  Some\nresearchers prefer the term  semistructured retrieval \nto distinguish XML retrieval from database querying.  We\nhave adopted the terminology that is widespread in the XML\nretrieval community.  For instance, the standard way of\nreferring to XML queries is  structured queries , not  semistructured queries .  The\nterm structured retrieval is rarely used for database\nquerying and it always refers to XML retrieval in this book.\n\n\nThere is a second type of information retrieval problem that\nis intermediate between unstructured retrieval and querying\na relational database: parametric and zone search, which\nwe discussed in Section 6.1 (page ).  In the data\nmodel of parametric and zone search, there are \nparametric fields (relational attributes\nlike date or file-size) and\nzones - text attributes that\neach take a chunk of unstructured text as value, e.g.,\nauthor and title in\nFigure 6.1 (page ).\nThe data model is\nflat, that is, there is no nesting of attributes. \nThe number of attributes is small.\nIn\ncontrast, XML documents have the more complex tree structure\nthat we see in Figure 10.2  in which attributes are\nnested. The number of attributes and nodes is greater than\nin parametric and zone search.\n\n\nAfter presenting the basic concepts of XML in Section 10.1 ,\nthis chapter first discusses the challenges we face in\nXML retrieval (Section 10.2 ). Next we describe a\nvector space model for XML retrieval (Section 10.3 ).\nSection 10.4  presents INEX, a shared task evaluation that\nhas been held for a number of years and currently is the\nmost important venue for XML retrieval research.\nWe discuss the differences between data-centric and\ntext-centric approaches to XML in Section 10.5 . \n\n\n\n\nSubsections\n\nBasic XML concepts\nChallenges in XML retrieval\nA vector space model for XML retrieval\nEvaluation of XML retrieval\nText-centric vs. data-centric XML retrieval\nReferences and further reading\nExercises\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Basic XML concepts\n Up: irbook\n Previous: References and further reading\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}