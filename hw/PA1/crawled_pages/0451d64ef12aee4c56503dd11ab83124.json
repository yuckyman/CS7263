{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/permuterm-indexes-1.html",
  "title": "Permuterm indexes",
  "body": "\n\n\n\n\nPermuterm indexes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: k-gram indexes for wildcard\n Up: General wildcard queries\n Previous: General wildcard queries\n    Contents \n    Index\n\n\n\n  \n\nPermuterm indexes\n  Our first special index for general wildcard queries is the  permuterm index  into our character set, to mark the end of a term. Thus, the term hello is shown here as the augmented term hello$. Next, we construct a permuterm index, in which the various rotations of each term (augmented with $) all link to the original vocabulary term. Figure 3.3  gives an example of such a permuterm index entry for the term hello.\n\n\n\n\nFigure 3.3:\nA portion of a permuterm index.\n\n\n\nWe refer to the set of rotated terms in the permuterm index as the permuterm vocabulary.\n\n\nHow does this index help us with wildcard queries? Consider the wildcard query m*n. The key is to rotate such a wildcard query so that the * symbol appears at the end of the string - thus the rotated wildcard query becomes n$m*. Next, we look up this string in the permuterm index, where seeking n$m* (via a search tree) leads to rotations of (among others) the terms man and moron.\n\n\nNow that the permuterm index enables us to identify the original\nvocabulary terms matching a wildcard query, we look up these terms in\nthe standard inverted index to retrieve matching\ndocuments. We can thus handle any wildcard query with a\nsingle * symbol. But what about a query such as\nfi*mo*er? In this case we first enumerate the terms\nin the dictionary that are in the permuterm index of\ner$fi*. Not all such dictionary terms will have the\nstring mo in the middle - we filter these out by\nexhaustive enumeration, checking each candidate to see if it\ncontains mo. In this example, the term\nfishmonger would survive this filtering but filibuster would not. We then run the surviving terms through the standard inverted index for document retrieval. One disadvantage of the permuterm index is that its dictionary becomes quite large, including as it does all rotations of each term.\n\n\nNotice the close interplay between the B-tree and the permuterm index above. Indeed, it suggests that the structure should perhaps be viewed as a permuterm B-tree. However, we follow traditional terminology here in describing the permuterm index as distinct from the B-tree that allows us to select the rotations with a given prefix.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: k-gram indexes for wildcard\n Up: General wildcard queries\n Previous: General wildcard queries\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}