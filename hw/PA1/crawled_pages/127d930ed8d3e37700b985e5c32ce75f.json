{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/references-and-further-reading-4.html",
  "title": "References and further reading",
  "body": "\n\n\n\n\nReferences and further reading\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Index compression\n Up: Index construction\n Previous: Other types of indexes\n    Contents \n    Index\n\n\n\n\n \n\nReferences and further reading\n\n\nWitten et al. (1999, Chapter 5) present an extensive\ntreatment of the subject of index construction and\nadditional indexing algorithms with different tradeoffs of\nmemory, disk space, and time. In general, blocked sort-based indexing does well on all three counts. However, if conserving\nmemory or disk space is the main criterion, then other algorithms may be\na better choice. See Witten et al. (1999), Tables 5.4\nand 5.5; BSBI is closest to ``sort-based\nmultiway merge,'' but the two algorithms differ in dictionary\nstructure and use of compression.  \n\n\nMoffat and Bell (1995) show how to construct an index\n``in situ,'' that is, with disk space usage close to what is\nneeded for the final index and with a minimum of additional\ntemporary files (cf. also Harman and Candela (1990)). They\ngive Lesk (1988) and Somogyi (1990) credit\nfor being among the first to employ sorting for index\nconstruction.\n\n\nThe SPIMI method in Section 4.3  is from\n(Heinz and Zobel, 2003). We have simplified several aspects\nof the algorithm, including compression and the fact that\neach term's data structure also contains, in addition to the\npostings list, its document frequency and house keeping\ninformation.  We recommend Heinz and Zobel (2003) and\nZobel and Moffat (2006) as up-do-date, in-depth treatments of\nindex construction. Other algorithms with good scaling\nproperties with respect to vocabulary size require several\npasses through the data, e.g., FAST-INV (Harman et al., 1992, Fox and Lee, 1991).\n\n\nThe  MapReduce architecture was introduced by\nDean and Ghemawat (2004). An open source implementation of\nMapReduce is available at\nhttp://lucene.apache.org/hadoop/.\nRibeiro-Neto et al. (1999) and Melnik et al. (2001) describe other\napproaches to distributed indexing.\nIntroductory chapters on distributed IR are\n(Baeza-Yates and Ribeiro-Neto, 1999, Chapter 9)\nand (Grossman and Frieder, 2004, Chapter 8).\nSee also Callan (2000).\n\n\nLester et al. (2005) and Büttcher and Clarke (2005a) analyze\nthe properties of logarithmic merging and compare it with other construction methods.\nOne of the first uses of this method was in Lucene\n(http://lucene.apache.org).\nOther dynamic indexing\nmethods are discussed by Büttcher et al. (2006) and\nLester et al. (2006). The latter paper also discusses\nthe strategy of replacing the old index by one\nbuilt from scratch.\n\n\nHeinz et al. (2002)\ncompare data structures for accumulating the vocabulary\nin memory.\nBüttcher and Clarke (2005b) discuss security models for a\ncommon inverted index for multiple users.\nA detailed characterization of the\n \nReuters-RCV1 collection can be found in (Lewis et al., 2004).\nNIST distributes the collection (see http://trec.nist.gov/data/reuters/reuters.html).\n\n\nGarcia-Molina et al. (1999, Chapter 2) review computer\nhardware relevant to system design\nin depth.\n\n\nAn effective indexer for enterprise search needs to be able to\ncommunicate efficiently with a number of applications that\nhold text data in corporations, including Microsoft Outlook,\nIBM's Lotus software, databases like Oracle and MySQL,\n content management systems  like Open Text, and\n enterprise resource planning  software like SAP.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Index compression\n Up: Index construction\n Previous: Other types of indexes\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}