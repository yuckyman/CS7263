{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/the-extended-boolean-model-versus-ranked-retrieval-1.html",
  "title": "The extended Boolean model versus ranked retrieval",
  "body": "\n\n\n\n\nThe extended Boolean model versus ranked retrieval\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: References and further reading\n Up: Boolean retrieval\n Previous: Processing Boolean queries\n    Contents \n    Index\n\n\n\n\n \n\nThe extended Boolean model versus ranked retrieval\n\n\nThe Boolean retrieval model contrasts with\n ranked retrieval models  such as the vector space model (Section 6.3 ),\nin which users largely use\n free text queries , that is, just\ntyping one or more words rather than using a precise\nlanguage with operators for building up query expressions, and the\nsystem decides which\ndocuments best satisfy the query.\nDespite decades of academic research on the advantages of ranked retrieval,\nsystems implementing the Boolean retrieval model were the main or only\nsearch option\nprovided by large commercial\ninformation providers for three decades until the early 1990s (approximately the date of arrival of the World Wide Web).\nHowever, these systems did not have just the basic Boolean operations\n(AND, OR, and NOT) which we have presented so far.\nA strict Boolean expression over terms with an unordered results set is\ntoo limited for many of the information needs that people have, and these\nsystems implemented extended Boolean retrieval models by incorporating\nadditional operators such as term proximity operators.\nA  proximity operator  is a way of specifying that two terms in a\nquery must occur close to each other in a document, where closeness may\nbe measured by limiting the allowed number of intervening words or by\nreference to a structural unit such as a sentence or paragraph.\n\n\n\n\nWorked example. Commercial Boolean searching: Westlaw.westlaw\n\n\nWestlaw\n(http://www.westlaw.com/) is\nthe largest commercial legal search service (in terms of the number of\npaying subscribers), with over half a million subscribers performing\nmillions of searches a day over tens of\nterabytes of text data.  The service was started in 1975.\nIn 2005, Boolean search (called ``Terms and Connectors'' by Westlaw) was\nstill the default,\nand used by a large percentage of users, although ranked\nfree text querying (called ``Natural Language'' by Westlaw) was added in 1992.\nHere are some example Boolean queries on Westlaw:\n\nInformation need: Information on the legal theories involved\nin preventing the disclosure of trade secrets by employees formerly\nemployed by a competing company.\nQuery: \"trade secret\" /s disclos! /s prevent /s employe!\n\n\n\n\n\nInformation need: Requirements for disabled people to be able to\naccess a workplace. \nQuery: disab! /p access! /s work-site work-place (employment /3 place)\n\n\n\n\n\n\n\n\nInformation need: Cases about a host's responsibility for drunk guests.\nQuery: host! /p (responsib! liab!) /p (intoxicat! drunk!) /p guest\n\n\nNote the long, precise\nqueries and the use of proximity operators, both uncommon in web search.\nSubmitted queries average about ten words in length.\nUnlike web search conventions, a space between words represents\ndisjunction (the tightest binding operator), & is AND and /s,\n/p, and / ask for matches in the same sentence, same paragraph or\nwithin  words respectively.  Double quotes give a  phrase search \n(consecutive words); see Section 2.4 (page ). The exclamation mark (!) gives a\ntrailing wildcard query wildcard; thus liab! matches all\nwords starting with liab.  Additionally work-site\nmatches any of worksite, work-site or work site;\nsee Section 2.2.1 (page ).\nTypical expert\nqueries are usually carefully defined and incrementally developed until\nthey obtain what look to be good results to the user.\n\n\nMany users, particularly professionals, prefer Boolean query models.\nBoolean queries are precise: a document either matches the query or it\ndoes not.  This offers the user greater control and transparency\nover what is\nretrieved.  And some domains, such as legal materials, allow an effective\nmeans of document ranking within a Boolean model: Westlaw returns\ndocuments in reverse chronological order, which is in practice quite\neffective.  In 2007, the majority of law librarians still seem to\nrecommend terms and connectors for high recall searches, and the majority of\nlegal users think they are getting greater control by using them.\nHowever, this does not mean that Boolean queries are more\neffective for professional searchers. Indeed, experimenting on a Westlaw\nsubcollection, Turtle (1994)\nfound that free text queries produced better results than Boolean\nqueries prepared by Westlaw's own reference librarians for the majority\nof the information needs in his experiments.  A general problem with\nBoolean search is that using AND operators tends to produce\nhigh precision but low recall searches, while using OR\noperators gives low precision but high recall searches, and it is\ndifficult or impossible to find a satisfactory middle ground.\nEnd worked example.\n\nIn this chapter, we have looked at the structure and construction of a\nbasic inverted index, comprising a dictionary and postings lists.\nWe introduced the Boolean retrieval model, and examined how to do\nefficient retrieval via linear time merges and simple query optimization.\nIn dictionaryranking-ir-system we will consider in\ndetail richer query models and\nthe sort of augmented index structures that are needed to handle them\nefficiently.  Here we just mention a few of the main additional things\nwe would like to be able to do:\n\n\nWe would like to better determine the set of terms in the\n  dictionary and to provide retrieval that is tolerant to spelling\n  mistakes and inconsistent choice of words.\n\n\n\nIt is often useful to search for compounds or phrases that denote a\nconcept such as ``operating system''.  As the Westlaw examples\nshow, we might\nalso wish to do proximity queries such as\nGates near Microsoft.  To answer such queries, the\nindex has to be augmented to capture the proximities of terms\nin documents.\n\n\n\nA Boolean model only records term presence or absence, but often\nwe would like to accumulate evidence, giving more weight to documents that have\na term several times as opposed to ones that contain it only once. To\nbe able to do this we need  term frequency  information (the number of\ntimes a term occurs in a document) in postings lists.\n\n\n\nBoolean queries just retrieve a set of matching\ndocuments, but commonly we wish to have an effective method to order\n(or ``rank'') the returned results.  This requires having a mechanism\nfor determining a document score which encapsulates how good a match a\ndocument is for a query.\n\n\n\n\n\nWith these additional ideas, we will have seen most of the basic\ntechnology that supports ad hoc searching over unstructured information.\nAd hoc searching over documents has recently\nconquered the world, powering not only web search engines but the kind\nof unstructured search that lies behind the large eCommerce websites.\nAlthough the main web search engines differ by emphasizing\n free text\nquerying , most of the basic issues and technologies of\nindexing and querying remain the same, as we will see in later chapters.\nMoreover, over time, web\nsearch engines have added at least partial implementations of some of\nthe most popular operators from extended Boolean models: phrase search\nis especially popular and most have a very partial implementation\nof Boolean operators.  Nevertheless, while these options are liked by\nexpert searchers, they are little used by most people and are not the\nmain focus in work on trying to improve web search engine performance.\n\n\nExercises.\n\nWrite a query using Westlaw syntax which would find any of the words professor, teacher, or lecturer in the same sentence as a form of the verb explain.\n\n\n\nTry using the Boolean search features on a couple of major web search\nengines.  For instance, choose a word, such as burglar, and\nsubmit the queries (i) burglar, (ii) burglar AND\n  burglar, and (iii) burglar OR burglar.  Look at the\nestimated number of results and top hits.  Do they make sense in terms of Boolean\nlogic?  Often they haven't for major search engines.  Can you make\nsense of what is going on?  What about if you try different words?\nFor example, query for (i) knight, (ii) conquer, and\nthen (iii) knight OR conquer. What bound should the number of\nresults from the first two queries place on the third query?  Is this\nbound observed?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: References and further reading\n Up: Boolean retrieval\n Previous: Processing Boolean queries\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}