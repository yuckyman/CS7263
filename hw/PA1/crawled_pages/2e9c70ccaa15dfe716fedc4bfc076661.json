{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/variable-byte-codes-1.html",
  "title": "Variable byte codes",
  "body": "\n\n\n\n\nVariable byte codes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Gamma codes\n Up: Postings file compression\n Previous: Postings file compression\n    Contents \n    Index\n\n\n\n\n\n\nVariable byte codes\n\n\n\n\n\n\n\n\n\nVB encoding.\nGaps are encoded using an integral number of bytes. \n The\nfirst bit, the continuation bit, of each byte indicates whether the\ncode ends with this byte (1) or not (0).\n\n docIDs\n824\n829\n215406\n \n \n gaps\n \n5\n214577\n \n \n VB code\n00000110 10111000\n10000101\n00001101 00001100 10110001\n \n \n\n \n\n\n\n\n Variable byte (VB) encoding  uses an integral number of\nbytes to encode a gap. The last 7 bits of a byte are\n``payload'' and encode part of the gap. The first bit of the\nbyte is a  continuation bit .\nIt is set to 1 for the last byte of the encoded gap and to 0\notherwise. To decode a variable byte code, we read a\nsequence of bytes with continuation bit 0 terminated by a\nbyte with continuation bit 1. We then extract and\nconcatenate the 7-bit parts.  Figure 5.8  gives\npseudocode for VB encoding and decoding and Table 5.4 \nan example of a VB-encoded postings list.\n\n\nWith VB compression, the size of the compressed\nindex for Reuters-RCV1 is 116 MB as we verified in an\nexperiment. This is a more than 50% reduction of the\nsize of the uncompressed index (see Table 5.6 ).\n\n\nThe idea of VB encoding can also be applied to larger or\nsmaller units than bytes: 32-bit words, 16-bit words, and 4-bit words\nor  nibbles . Larger words\nfurther decrease the amount of bit manipulation necessary at\nthe cost of less effective (or no) compression.  Word sizes\nsmaller than bytes get even better compression ratios at the\ncost of more bit manipulation. In general, bytes offer a\ngood compromise between compression ratio and speed of\ndecompression.\n\n\nFor\nmost IR systems variable byte codes\noffer an excellent tradeoff between time and space.\nThey are also simple to implement - most of the\nalternatives referred to in Section 5.4 \nare more complex.  But if disk space is\na scarce resource, we can achieve better compression\nratios by using bit-level encodings, in particular two\nclosely related encodings: \ncodes, which we will turn to next, and  codes (Exercise 5.3.2 ).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Gamma codes\n Up: Postings file compression\n Previous: Postings file compression\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}