{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/obtaining-the-character-sequence-in-a-document-1.html",
  "title": "Obtaining the character sequence in a document",
  "body": "\n\n\n\n\nObtaining the character sequence in a document\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Choosing a document unit\n Up: Document delineation and character\n Previous: Document delineation and character\n    Contents \n    Index\n\n\n\n\nObtaining the character sequence in a document\n\n\nDigital documents that are the input to an indexing process are typically\nbytes in a file or on a web server.  The first step of processing is to\nconvert this byte sequence into a linear sequence of characters.  For the\ncase of plain English text in ASCII encoding, this is\ntrivial.  But often things get much more complex. The sequence of\ncharacters may be encoded by one of various single byte or multibyte\nencoding schemes, \nsuch as Unicode  UTF-8, or various national or vendor-specific\nstandards.  We need to determine the correct encoding.  This can be\nregarded as a machine learning\nclassification  problem, as discussed\nin Chapter 13 ,but is often handled by heuristic methods, user\nselection, or by using provided document metadata.\nOnce the encoding is\ndetermined, we decode the byte sequence to a\ncharacter sequence.  We might save the choice of encoding \nbecause it gives some evidence about what language the document is\nwritten in.  \n\n\nThe characters may have to be\ndecoded out of some binary representation like Microsoft Word DOC files\nand/or a compressed format such as zip files.  Again, we must determine \nthe document format, and then an appropriate decoder has to be used.\nEven for plain text documents,\nadditional decoding may need to be done.  In  XML \ndocuments xmlbasic, character entities, such as &amp;,\nneed to be decoded to give the\ncorrect character, namely & for &amp;. \nFinally, the textual part of \nthe document may need to be extracted out of other material that will\nnot be processed.  This might be the desired handling for XML files, if the\nmarkup is going to be ignored; we would almost certainly want to do\nthis with postscript or PDF files.  We will not deal further with these issues\nin this book, and will assume henceforth that our documents are a list of\ncharacters.  Commercial products usually need to support a broad range of \ndocument types and encodings, since users want things to\njust work with their data as is.  Often, they just think of documents as text\ninside applications and are not even aware of how it is encoded on disk.\nThis problem is usually solved by licensing a software library that handles\ndecoding document formats and character encodings.\n\n\nThe idea that text is a linear sequence of characters is also called\ninto question by some writing systems, such as Arabic, where text takes\non some two dimensional and mixed order characteristics, as shown in\n and 2.2 . But, despite some complicated\nwriting system \nconventions, there is an underlying sequence of sounds being represented\nand hence an essentially linear structure remains, and this is what is\nrepresented in the digital representation of Arabic, as shown in\nFigure 2.1 . \n\n\n\n\nAn example of a vocalized Modern\n  Standard Arabic word.The writing is from right to left and letters\n  undergo complex mutations as they are combined.  The\n  representation of short vowels (here, /i/ and /u/) and the final /n/\n  (nunation) departs from strict linearity by being represented as\n  diacritics above and below letters.  Nevertheless, the represented\n  text is still clearly a linear ordering of characters representing\n  sounds.  Full vocalization, as here, normally appears only in the\n  Koran and children's books.  Day-to-day text is unvocalized (short\n  vowels are not represented but the letter for a would still\n  appear) or partially vocalized, with short vowels inserted \n  in places where the writer perceives ambiguities.  These choices add\n  further complexities to indexing.\n\n\n\n\n\nThe conceptual linear order of characters is not necessarily\n  the order that you see on the page.\nIn languages that are written right-to-left, such as Hebrew and Arabic,\n  it is quite common to also have left-to-right text interspersed, such\n  as numbers and dollar amounts.\n  With modern Unicode representation concepts, the order of characters\n  in files matches the \n  conceptual order, and the reversal of displayed characters is handled\n  by the rendering system, but this may not be true for documents in\n  older encodings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Choosing a document unit\n Up: Document delineation and character\n Previous: Document delineation and character\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}