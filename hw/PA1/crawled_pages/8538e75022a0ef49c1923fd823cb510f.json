{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/index-construction-1.html",
  "title": "Index construction",
  "body": "\n\n\n\n\nIndex construction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Hardware basics\n Up: irbook\n Previous: References and further reading\n    Contents \n    Index\n\n\n\n\n\nIndex construction\n\n\nIn this chapter, we look at how to construct an inverted\nindex.  We call this process   index construction  or  indexing ;\nthe process or machine that performs it the\n  indexer . The design of indexing algorithms is\ngoverned by hardware constraints. We therefore begin\nthis chapter with a review of the basics of computer\nhardware that are relevant for indexing.\nWe then introduce blocked sort-based indexing (Section 4.2 ), an efficient\nsingle-machine algorithm designed for static collections\nthat can be viewed as a more scalable version of the basic\nsort-based indexing algorithm we introduced in\nChapter 1 . \nSection 4.3  describes \nsingle-pass in-memory indexing, an algorithm that has even\nbetter scaling properties because it does not hold the vocabulary\nin memory.\nFor very large collections like\nthe web, indexing has to be distributed over\ncomputer clusters\nwith hundreds or thousands of machines. We discuss this in\nSection 4.4 . Collections with frequent\nchanges require dynamic indexing\nintroduced in Section 4.5  so that changes in\nthe collection are immediately reflected in the index.  Finally, we cover some complicating\nissues that can arise in indexing - such as security and\nindexes for ranked retrieval - in\nSection 4.6 .\n\n\nIndex construction interacts with several topics covered in\nother chapters.\nThe indexer needs raw\ntext, but documents are encoded in many ways (see\nChapter 2 ).  Indexers compress and decompress\nintermediate files and the final index (see Chapter 5 ).\nIn web search,\ndocuments are not on a local file system, but\nhave to be spidered or crawled\n(see Chapter 20 ).  In  enterprise search ,\nmost documents are encapsulated in varied content\nmanagement systems, email applications, and databases. We\ngive some examples in Section 4.7 .  Although most\nof these applications can be accessed via http, native Application Programming Interfaces (APIs)\nare usually more efficient.  The reader should be aware that\nbuilding the subsystem that feeds raw text to the indexing\nprocess can in itself be a challenging problem.\n\n\n\n\n\nSubsections\n\nHardware basics\nBlocked sort-based indexing\nSingle-pass in-memory indexing\nDistributed indexing\nDynamic indexing\nOther types of indexes\nReferences and further reading\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Hardware basics\n Up: irbook\n Previous: References and further reading\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}