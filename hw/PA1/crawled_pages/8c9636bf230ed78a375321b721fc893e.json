{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/queries-as-vectors-1.html",
  "title": "Queries as vectors",
  "body": "\n\n\n\n\nQueries as vectors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Computing vector scores\n Up: The vector space model\n Previous: Dot products\n    Contents \n    Index\n\n\n\n\n \n\nQueries as vectors\n\n\nThere is a far more compelling reason to represent documents\nas vectors: we can also view a query as a\nvector. Consider the query  jealous gossip. This\nquery turns into the unit vector\n\n on the three coordinates of\nFigures 6.12 and 6.13. The key\nidea now: to assign to each document  a score equal to\nthe dot product \n\n\n\n\n\n(26)\n\n\n\nIn the example of Figure 6.13, Wuthering Heights is the top-scoring document for this query with a score of 0.509, with Pride and Prejudice a distant second with a score of 0.085, and Sense and Sensibility last with a score of 0.074. This simple example is somewhat misleading: the number of dimensions in practice will be far larger than three: it will equal the vocabulary size .\n\n\nTo summarize, by viewing a query as a ``bag of words'', we are able to treat it as a very short document. As a consequence, we can use the cosine similarity between the query vector and a document vector as a measure of the score of the document for that query. The resulting scores can then be used to select the top-scoring documents for a query. Thus we have\n\n\n\n\n\n\n(27)\n\n\nA document may have a high cosine score for a query even if it does not contain all query terms.  Note that the preceding discussion does not hinge on any specific weighting of terms in the document vector, although for the present we may think of them as either tf or tf-idf weights.  In fact, a number of weighting schemes are possible for query as well as document vectors, as illustrated in Example 6.3.2 and developed further in Section 6.4 .\n\n\nComputing the cosine similarities between the query vector and each document vector in the collection, sorting the resulting scores and selecting the top  documents can be expensive -- a single similarity computation can entail a dot product in tens of thousands of dimensions, demanding tens of thousands of arithmetic operations. In Section 7.1  we study how to use an inverted index for this purpose, followed by a series of heuristics for improving on this.\n\n\nWorked example.\nWe now consider the query best car insurance on a fictitious collection with \n documents where the document frequencies of auto, best, car and insurance are respectively 5000, 50000, 10000 and 1000.\n\n\n\nterm\nquery\ndocument\nproduct\n\n \ntf\ndf\nidf\n\n\ntf\nwf\n\n\n \n\nauto\n0\n5000\n2.3\n0\n1\n1\n0.41\n0\n\nbest\n1\n50000\n1.3\n1.3\n0\n0\n0\n0\n\ncar\n1\n10000\n2.0\n2.0\n1\n1\n0.41\n0.82\n\ninsurance\n1\n1000\n3.0\n3.0\n2\n2\n0.82\n2.46\n\n\n\nIn this example the weight of a term in the query is simply the idf (and zero for a term not in the query, such as auto); this is reflected in the column header \n (the entry for auto is zero because the query does not contain the termauto).  For documents, we use tf weighting with no use of idf but with Euclidean normalization.  The former is shown under the column headed wf, while the latter is shown under the column headed \n.  Invoking (23) now gives a net score of \n.\nEnd worked example.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Computing vector scores\n Up: The vector space model\n Previous: Dot products\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}