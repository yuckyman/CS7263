{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/positional-indexes-1.html",
  "title": "Positional indexes",
  "body": "\n\n\n\n\nPositional indexes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Positional index size.\n Up: Positional postings and phrase\n Previous: Biword indexes\n    Contents \n    Index\n\n\n\n\n \n\nPositional indexes\n\n\nFor the reasons given, a biword index is not the standard solution.\nRather, a  positional index  is most commonly\nemployed.  Here, for each \nterm in the vocabulary, we store postings of the\nform docID: position1, position2, ..., as shown in\nFigure 2.11 , where each position is a token index in the document.\nEach posting will also usually record the term\nfrequency, for reasons discussed in Chapter 6 .\n\n\n\n\n\n\nTo process a phrase query, you still need to \naccess the inverted index entries for each distinct term.\nAs before, you would start with the\nleast frequent term and then work to further restrict the list of\npossible candidates.  \nIn the merge operation, the same general technique is used as before,\nbut rather than simply checking that both terms are in a document,\nyou also need to check that their positions of appearance in the\ndocument are compatible with the phrase query being evaluated.  This\nrequires working out offsets between the words.  \n\n\nWorked example. Satisfying phrase queries.phrasequery\nSuppose the postings\nlists for to and be are as in Figure 2.11 ,\nand the query is ``to be or not to be''.\nThe postings lists to access are: to, be, or, not.  \nWe will examine intersecting the postings lists for to and be.\nWe first look for documents that contain both terms.  Then, we look for\nplaces in the lists where there is an occurrence of \nbe with a token index one higher than a position of to,\nand then we look for another occurrence of each word\nwith token index 4 higher than the first occurrence. In the above lists,\nthe pattern of occurrences that is a possible match is:\n\nto: ...; 4:...,429,433; ...\n\nbe: ...; 4:...,430,434; ...\n\nEnd worked example.\n\n\n\n\n\nThe same general method is applied for within  word proximity\nsearches, of the sort we saw in westlaw:\n\nemployment /3 place\n\n\nHere, / means ``within  words\nof (on either side)''.\nClearly, positional indexes can be used for such queries; biword\nindexes cannot.  We show in Figure 2.12  an algorithm for satisfying within  word proximity searches; it is further discussed in Exercise 2.4.3 .\n\n\n\n\nSubsections\n\n\nPositional index size.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Positional index size.\n Up: Positional postings and phrase\n Previous: Biword indexes\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}