{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/vector-space-scoring-and-query-operator-interaction-1.html",
  "title": "Vector space scoring and query operator interaction",
  "body": "\n\n\n\n\nVector space scoring and query operator interaction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Boolean retrieval\n Up: Computing scores in a\n Previous: Putting it all together\n    Contents \n    Index\n\n\n\n\n \n\nVector space scoring and query operator interaction\n \nWe introduced the vector space model as a paradigm for free text queries. We conclude this chapter by discussing how the vector space scoring model relates to the query operators we have studied in earlier chapters. The relationship should be viewed at two levels: in terms of the expressiveness of queries that a sophisticated user may pose, and in terms of the index that supports the evaluation of the various retrieval methods. In building a search engine, we may opt to support multiple query operators for an end user. In doing so we need to understand what components of the index can be shared for executing various query operators, as well as how to handle user queries that mix various query operators.\n\n\nVector space scoring supports so-called  free text  retrieval, in which a query is specified as a set of words without any query operators connecting them. It allows documents matching the query to be scored and thus ranked, unlike the Boolean, wildcard and phrase queries studied earlier. Classically, the interpretation of such free text queries was that at least one of the query terms be present in any retrieved document. However more recently, web search engines such as Google have popularized the notion that a set of terms typed into their query boxes (thus on the face of it, a free text query) carries the semantics of a conjunctive query that only retrieves documents containing all or most query terms.\n\n\n\n\nSubsections\n\n\nBoolean retrieval\nWildcard queries\nPhrase queries\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Boolean retrieval\n Up: Computing scores in a\n Previous: Putting it all together\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}