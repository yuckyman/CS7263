{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/biword-indexes-1.html",
  "title": "Biword indexes",
  "body": "\n\n\n\n\nBiword indexes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Positional indexes\n Up: Positional postings and phrase\n Previous: Positional postings and phrase\n    Contents \n    Index\n\n\n\n\nBiword indexes\n\n\nOne approach to handling phrases is\nto consider every pair of consecutive terms in a document as a phrase.\nFor example, the text Friends, Romans, Countrymen would generate the\n biwords :\n\nfriends romans\n\nromans countrymen\n\n\nIn this model, we treat each of these biwords as a vocabulary term.\nBeing able to process two-word phrase queries is immediate.\nLonger phrases can be processed by breaking them down.  The query\nstanford university palo alto can be broken into the Boolean query\non biwords: \n\n``stanford university'' AND ``university palo'' AND\n``palo alto'' \n\n\nThis query could be expected to work fairly well in practice, but there\ncan and will be occasional false positives.\nWithout examining the documents, we cannot verify that the documents\nmatching the above Boolean query do actually contain the original 4 word\nphrase.\n\n\nAmong possible queries, nouns and noun phrases have a special status in\ndescribing the concepts people are interested in searching for.  But\nrelated nouns can often be divided from each other by various function\nwords, in phrases such as the abolition of slavery or\nrenegotiation of the constitution.  These needs can be\nincorporated into the biword indexing model in the following way.  \nFirst, we tokenize the text and perform part-of-speech-tagging.We can then group terms into nouns, including proper nouns, (N)\nand function words, including articles and prepositions, (X), among\nother classes.\nNow deem any string of terms of the form NX*N to be an extended biword.\nEach such extended biword is made a term in the vocabulary.\nFor example:\n\n\nrenegotiation\nof\nthe\nconstitution\n\nN\nX\nX\nN\n\n\n\nTo process a query using such an extended biword index, we need to also\nparse it into N's and X's, and then segment the query into extended\nbiwords, which can be looked up in the index.  \n\n\nThis algorithm does not always work in an \nintuitively optimal manner when \nparsing longer queries into Boolean queries. Using the above algorithm,\nthe query\n\ncost overruns on a power plant\n\n\nis parsed into\n\n``cost overruns'' AND ``overruns power'' AND ``power plant''\n\n\nwhereas it might seem a better query to omit the middle biword.  Better results can be obtained by using more precise part-of-speech patterns that define which extended biwords should be indexed.\n\n\nThe concept of a biword index can be extended to longer sequences of\nwords, and if the index includes variable length word sequences, it is\ngenerally referred to as a  phrase index .  Indeed, searches for\na single term are not naturally handled in a biword index (you would\nneed to scan the dictionary for all biwords containing the term), and so\nwe also need to have an index of single-word terms.\nWhile there is always a chance of false positive matches, the chance\nof a false positive match on indexed phrases of length 3 or more\nbecomes very small indeed.  But on the other hand, storing longer\nphrases has the potential to greatly expand the vocabulary size.\nMaintaining exhaustive phrase indexes for phrases of length greater\nthan two is a daunting prospect, and even use of an exhaustive biword\ndictionary greatly expands the size of the vocabulary.  However,\ntowards the end of this section we discuss the utility of the strategy\nof using a partial phrase index in a compound indexing scheme.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Positional indexes\n Up: Positional postings and phrase\n Previous: Positional postings and phrase\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}