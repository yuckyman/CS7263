{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/dictionary-as-a-string-1.html",
  "title": "Dictionary as a string",
  "body": "\n\n\n\n\nDictionary as a string\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Blocked storage\n Up: Dictionary compression\n Previous: Dictionary compression\n    Contents \n    Index\n\n\n\n\nDictionary as a string\n\nThe simplest data structure for the dictionary is to \nsort the vocabulary lexicographically and store it\nin an array\nof fixed-width entries as shown in\nFigure 5.3 . \nAssuming a Unicode representation, we\nallocate We allocate 20\nbytes for the term itself (because few\nterms have more than twenty characters in English), 4 bytes for\nits document frequency, and 4 bytes for the pointer to its postings\nlist. Four-byte pointers resolve a 4 gigabytes (GB) address space. For\nlarge collections like the web, we need to allocate more\nbytes per pointer.  We look up terms in the array by binary\nsearch.\n\n\nFor Reuters-RCV1, we need \n\n\n\n\n\nfor storing\nthe dictionary in this scheme.\n\n\n\n\nDictionary-as-a-string storage.Pointers mark\nthe end of the preceding term and the beginning of the\nnext. For example, the first three terms in this example\nare systile, syzygetic,\nand syzygial.\n\n\n\n\nUsing fixed-width entries for terms is clearly wasteful. The\naverage length of a term in English is about eight\ncharacters icompresstb1, so on average we are wasting twelve characters \n(or\n24 bytes) \nin\nthe fixed-width scheme. Also, we have no way of storing terms with\nmore than twenty characters like\nhydrochlorofluorocarbons\nand\nsupercalifragilisticexpialidocious.\nWe can\novercome these\nshortcomings\nby storing the dictionary terms as one long string\nof characters, as shown in Figure 5.4 . The\npointer to the next term is also used to demarcate the end\nof the current term. As before, we locate terms in the data\nstructure by way of binary search in the (now smaller) table. This scheme saves us 60%\ncompared to fixed-width storage - \n\n\n24 bytes on average of\nthe 40 bytes \n\n12 bytes on average of\nthe 20 bytes \n\nwe allocated for terms before. However, we now\nalso need to store  term pointers. The term\npointers resolve \n positions, so they\nneed to be \n bits or 3 bytes long.\n\n\nIn this new scheme, \nwe need \n\n for\nthe Reuters-RCV1 dictionary:\n4 bytes each for frequency and postings\npointer, 3 bytes for the term pointer, and \n bytes on\naverage for the term. \nSo we have reduced the space requirements\nby one third from 19.211.2 to 10.87.6 MB.\n\n\n\n\nBlocked storage with four terms per block.The\nfirst block consists of \nsystile,\nsyzygetic,\nsyzygial, and syzygy with lengths of\nseven, nine, eight, and six characters, respectively. Each term is preceded\nby a byte encoding its length that\nindicates how many bytes\nto skip to reach subsequent terms. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Blocked storage\n Up: Dictionary compression\n Previous: Dictionary compression\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}