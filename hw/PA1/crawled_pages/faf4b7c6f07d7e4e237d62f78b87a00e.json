{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/latent-semantic-indexing-1.html",
  "title": "Latent semantic indexing",
  "body": "\n\n\n\n\nLatent semantic indexing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: References and further reading\n Up: Matrix decompositions and latent\n Previous: Low-rank approximations\n    Contents \n    Index\n\n\n\n\nLatent semantic indexing\n\nWe now discuss the approximation of a term-document matrix  by one of lower rank using the SVD.  The low-rank approximation to  yields a new representation for each document in the collection.  We will cast queries into this low-rank representation as well, enabling us to compute query-document similarity scores in this low-rank representation.  This process is known as  latent semantic indexing  (generally abbreviated LSI).\n\n\nBut first, we motivate such an approximation. Recall the vector space representation of documents and queries introduced in Section 6.3 (page ). This vector space representation enjoys a number of advantages including the uniform treatment of queries and documents as vectors, the induced score computation based on cosine similarity, the ability to weight different terms differently, and its extension beyond document retrieval to such applications as clustering and classification. The vector space representation suffers, however, from its inability to cope with two classic problems arising in natural languages: synonymy and polysemy. Synonymy refers to a case where two different words (say car and automobile) have the same meaning. Because the vector space representation fails to capture the relationship between synonymous terms such as car and automobile - according each a separate dimension in the vector space. Consequently the computed similarity \n between a query  (say, car) and a document  containing both car and automobile underestimates the true similarity that a user would perceive. Polysemy on the other hand refers to the case where a term such as charge has multiple meanings, so that the computed similarity \n overestimates the similarity that a user would perceive. Could we use the co-occurrences of terms (whether, for instance, charge occurs in a document containing steed versus in a document containing electron) to capture the latent semantic associations of terms and alleviate these problems?\n\n\nEven for a collection of modest size, the term-document matrix  is likely to have several tens of thousand of rows and columns, and a rank in the tens of thousands as well. In latent semantic indexing (sometimes referred to as  latent semantic analysis (LSA) ), we use the SVD to construct a low-rank approximation  to the term-document matrix, for a value of  that is far smaller than the original rank of . In the experimental work cited later in this section,  is generally chosen to be in the low hundreds. We thus map each row/column (respectively corresponding to a term/document) to a -dimensional space; this space is defined by the  principal eigenvectors (corresponding to the largest eigenvalues) of \n and \n. Note that the matrix  is itself still an \n matrix, irrespective of .\n\n\nNext, we use the new -dimensional LSI representation as we did the original representation - to compute similarities between vectors. A query vector  is mapped into its representation in the LSI space by the transformation\n\n\n\n\n\n\n(244)\n\n\nNow, we may use cosine similarities as in Section 6.3.1 (page ) to compute the similarity between a query and a document, between two documents, or between two terms.  Note especially that Equation 244 does not in any way depend on  being a query; it is simply a vector in the space of terms.  This means that if we have an LSI representation of a collection of documents, a new document not in the collection can be ``folded in'' to this representation using Equation 244.  This allows us to incrementally add documents to an LSI representation.  Of course, such incremental addition fails to capture the co-occurrences of the newly added documents (and even ignores any new terms they contain).  As such, the quality of the LSI representation will degrade as more documents are added and will eventually require a recomputation of the LSI representation.\n\n\nThe fidelity of the approximation of  to  leads us to hope that the relative values of cosine similarities are preserved: if a query is close to a document in the original space, it remains relatively close in the -dimensional space. But this in itself is not sufficiently interesting, especially given that the sparse query vector  turns into a dense query vector  in the low-dimensional space. This has a significant computational cost, when compared with the cost of processing  in its native form.\n\n\nWorked example.\nConsider the term-document matrix \n\n\n  \n\n\n\n\n\n\n \n ship\n1\n0\n1\n0\n0\n0\n \n boat\n0\n1\n0\n0\n0\n0\n \n ocean\n1\n1\n0\n0\n0\n0\n \n voyage\n1\n0\n0\n1\n1\n0\n \n trip\n0\n0\n0\n1\n0\n1\n \n\n\n\nIts singular value decomposition is the product of three matrices as below.  First we have  which in this example is:\n\n\n  \n1\n2\n3\n4\n5\n \n ship\n\n\n\n\n\n \n boat\n\n\n\n0.00\n0.73\n \n ocean\n\n\n\n0.00\n\n \n voyage\n\n0.35\n0.15\n\n0.16\n \n trip\n\n0.65\n\n0.58\n\n \n\n\n\nWhen applying the SVD to a term-document matrix,  is known as the SVD term matrix.  The singular values are \n\n\n2.16\n0.00\n0.00\n0.00\n0.00\n\n0.00\n1.59\n0.00\n0.00\n0.00\n\n0.00\n0.00\n1.28\n0.00\n0.00\n\n0.00\n0.00\n0.00\n1.00\n0.00\n\n0.00\n0.00\n0.00\n0.00\n0.39\n\n\n\n\nFinally we have , which in the context of a term-document matrix is known as the SVD document matrix:\n\n\n  \n\n\n\n\n\n\n \n 1\n\n\n\n\n\n\n \n 2\n\n\n\n0.63\n0.22\n0.41\n \n 3\n0.28\n\n0.45\n\n0.12\n\n \n 4\n0.00\n0.00\n0.58\n0.00\n\n0.58\n \n 5\n\n0.29\n0.63\n0.19\n0.41\n\n \n\n\n\nBy ``zeroing out'' all but the two largest singular values of , we obtain \n\n\n2.16\n0.00\n0.00\n0.00\n0.00\n\n0.00\n1.59\n0.00\n0.00\n0.00\n\n0.00\n0.00\n0.00\n0.00\n0.00\n\n0.00\n0.00\n0.00\n0.00\n0.00\n\n0.00\n0.00\n0.00\n0.00\n0.00\n\n\n\n\nFrom this, we compute \n\n\n  \n\n\n\n\n\n\n \n 1\n\n\n\n\n\n\n \n 2\n\n\n\n1.00\n0.35\n0.65\n \n 3\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n \n 4\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n \n 5\n0.00\n0.00\n0.00\n0.00\n0.00\n0.00\n \n\n\n\nNotice that the low-rank approximation, unlike the original matrix , can have negative entries.\nEnd worked example.\n\nExamination of  and  in Example 18.4 shows that the last 3 rows of each of these matrices are populated entirely by zeros.  This suggests that the SVD product  in Equation 241 can be carried out with only two rows in the representations of  and ; we may then replace these matrices by their truncated versions \n and .  For instance, the  truncated SVD  document matrix  in this example is:\n\n\n  \n\n\n\n\n\n\n \n 1\n\n\n\n\n\n\n \n 2\n\n\n\n1.00\n0.35\n0.65\n \n\n\n\nFigure 18.3  illustrates the documents in  in two dimensions.  Note also that  is dense relative to .\n\n\n\n\nFigure 18.3:\nThe documents of Example 18.4 reduced to two dimensions in .\n\n\n\n\nWe may in general view the low-rank approximation of  by  as a constrained optimization problem: subject to the constraint that  have rank at most , we seek a representation of the terms and documents comprising  with low Frobenius norm for the error \n. When forced to squeeze the terms/documents down to a -dimensional space, the SVD should bring together terms with similar co-occurrences. This intuition suggests, then, that not only should retrieval quality not suffer too much from the dimension reduction, but in fact may improve.\n\n\nDumais (1993) and Dumais (1995) conducted experiments with LSI on TREC documents and tasks, using the commonly-used Lanczos algorithm to compute the SVD.  At the time of their work in the early 1990's, the LSI computation on tens of thousands of documents took approximately a day on one machine.  On these experiments, they achieved precision at or above that of the median TREC participant.  On about 20% of TREC topics their system was the top scorer, and reportedly slightly better on average than standard vector spaces for LSI at about 350 dimensions.  Here are some conclusions on LSI first suggested by their work, and subsequently verified by many other experiments.\n\n\n\nThe computational cost of the SVD is significant; at the time of this writing, we know of no successful experiment with over one million documents. This has been the biggest obstacle to the widespread adoption to LSI.  One approach to this obstacle is to build the LSI representation on a randomly sampled subset of the documents in the collection, following which the remaining documents are ``folded in'' as detailed with Equation 244.\n\nAs we reduce , recall tends to increase, as expected.\n\nMost surprisingly, a value of  in the low hundreds can actually increase precision on some query benchmarks. This appears to suggest that for a suitable value of , LSI addresses some of the challenges of synonymy.\n\nLSI works best in applications where there is little overlap between queries and documents.\n\n\n\nThe experiments also documented some modes where LSI failed to match the effectiveness of more traditional indexes and score computations. Most notably (and perhaps obviously), LSI shares two basic drawbacks of vector space retrieval: there is no good way of expressing negations (find documents that contain german but not shepherd), and no way of enforcing Boolean conditions.\n\n\n LSI can be viewed as  soft clustering  by interpreting each dimension of the reduced space as a cluster and the value that a document has on that dimension as its fractional membership in that cluster.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: References and further reading\n Up: Matrix decompositions and latent\n Previous: Low-rank approximations\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}