{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/stemming-and-lemmatization-1.html",
  "title": "Stemming and lemmatization",
  "body": "\n\n\n\n\nStemming and lemmatization\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Faster postings list intersection\n Up: Determining the vocabulary of\n Previous: Other languages.\n    Contents \n    Index\n\n\n\n\nStemming and lemmatization\n\n\nFor grammatical reasons, documents are going to use different forms of a\nword, such as organize, organizes, and organizing.  \nAdditionally, there are families of derivationally related words with\nsimilar meanings, such as democracy, democratic, and\ndemocratization. In many situations, it seems as if it would be\nuseful for a search for one of these words to return documents that\ncontain another word in the set.\n\n\nThe goal of both stemming and lemmatization is to reduce inflectional\nforms and sometimes derivationally related forms\nof a word to a common base form.  For instance:\n\nam, are, is  be \n\ncar, cars, car's, cars'  car\n\n\nThe result of this mapping of text will be something like:\n\nthe boy's cars are different colors \n\nthe boy car be differ color\n\n\nHowever, the two words differ in their flavor.\n Stemming  usually refers to a \ncrude heuristic process that chops off the ends of words in the hope of\nachieving this goal correctly most of the time, and often includes the removal \nof derivational affixes.\n Lemmatization  usually refers to doing things properly\nwith the use of a\nvocabulary and morphological analysis of words, normally aiming to\nremove inflectional endings only and to return the base or dictionary form\nof a word, which is known as the  lemma .\nIf confronted with the\ntoken saw, stemming might return just s, whereas\nlemmatization would attempt to return either see or saw\ndepending on whether the use of the token was as a verb or a noun.\nThe two may also differ in that stemming most commonly collapses\nderivationally related words, whereas lemmatization commonly only\ncollapses the different inflectional forms of a lemma.\nLinguistic processing for stemming or lemmatization is\noften done by an additional plug-in component to the indexing process,\nand a number of such components exist, both commercial and open-source.\n\n\n \nThe most common algorithm for stemming English, and one that has\nrepeatedly been shown to be empirically very effective, is\n Porter's\nalgorithm  (Porter, 1980).  The entire algorithm is too long\nand intricate to present here, but we will indicate its general nature.\nPorter's algorithm consists of 5\nphases of word reductions, applied sequentially.  Within each phase\nthere are various conventions to select rules, such as selecting the\nrule from each rule group\nthat applies to the longest suffix.  In the first phase, this convention\nis used with the following rule group:\n\n\n\n\nMany of the later rules use a concept of the measure of a\nword, which loosely checks the number of syllables to see whether a word\nis long enough that it is\nreasonable to regard the matching portion of a rule as a suffix rather than as \npart of the stem of a word.  For example, the rule:\n\n()    EMENT    \n\nwould map replacement to replac, but not cement to\nc. The official site for the Porter Stemmer is:\n\nhttp://www.tartarus.org/~martin/PorterStemmer/\n\n\n\n\nFigure 2.8:\nA comparison of three stemming algorithms on a sample text.\n\n\n\n\nOther stemmers exist, including the older, one-pass Lovins stemmer \n(Lovins, 1968), and newer\nentrants like the Paice/Husk stemmer (Paice, 1990); see:\n\nhttp://www.cs.waikato.ac.nz/~eibe/stemmers/\nhttp://www.comp.lancs.ac.uk/computing/research/stemming/\n\nFigure 2.8  presents an informal comparison of the different\nbehaviors of these stemmers.\nStemmers use language-specific rules, but they require less\nknowledge than a lemmatizer, which needs a complete vocabulary\nand morphological analysis to\ncorrectly lemmatize words.  Particular domains may also require\nspecial stemming rules.\nHowever, the exact stemmed form does not matter, only the\nequivalence classes it forms. \n\n\nRather than using a stemmer, you can use a  lemmatizer , a tool from\nNatural Language Processing which does full morphological analysis to\naccurately identify the lemma for each word.  Doing full morphological analysis\nproduces at most very modest benefits for retrieval.  It is hard to say\nmore, because either form of normalization\ntends not to improve English\ninformation retrieval performance in aggregate - at least not by very much.  While\nit helps a lot for some queries, it equally hurts performance a lot for others.\nStemming increases recall while harming precision.  As an example of\nwhat can go wrong, note that the Porter stemmer stems all of the\nfollowing words: \n\noperate operating operates operation operative operatives operational\n\nto oper.  However, since operate in its various forms is a\ncommon verb, we would expect to lose considerable precision on queries\nsuch as the following with Porter stemming:\n\noperational and research \n\noperating and system \n\noperative and dentistry\n\n\nFor a case like this, moving to using a lemmatizer would not completely \nfix the problem because\nparticular inflectional forms are used in particular collocations:\na sentence with the words operate and system is not a good\nmatch for the query operating and system.  Getting better\nvalue from term normalization depends more on pragmatic issues\nof word use than on formal issues of linguistic morphology.\n\n\nThe situation is different for languages with much more\nmorphology (such as Spanish, German, and Finnish).  Results in\nthe European CLEF evaluations have repeatedly shown quite large gains\nfrom the use of stemmers (and compound splitting for languages like\nGerman); see the references in Section 2.5 .\n\n\nExercises.\n\nAre the following statements true or false?\n\n\nIn a Boolean retrieval system, stemming never lowers precision.\n\nIn a Boolean retrieval system, stemming never lowers recall.\n\nStemming increases the size of the vocabulary.\n\nStemming should be invoked at indexing time but not while processing a\n  query.\n\n\n\n\nSuggest what normalized form should be used for these words (including\nthe word itself as a possibility):\n\n\n'Cos\n\nShi'ite\n\ncont'd\n\nHawai'i\n\nO'Rourke\n\n\n\n\nThe following pairs of words are stemmed to the same form by the Porter\nstemmer.  Which pairs would you argue shouldn't be conflated.  Give your\nreasoning.\n\n\nabandon/abandonment\n\nabsorbency/absorbent\n\nmarketing/markets\n\nuniversity/universe\n\nvolume/volumes\n\n\n\n\nFor the Porter stemmer rule group shown in porter-rule-group:\n\n\nWhat is the purpose of including an identity rule such as SS  SS?\n\nApplying just this rule group, what will the following words be\n  stemmed to? \n\ncircus canaries boss\n\n\nWhat\n  rule should be added to correctly stem pony?\n\nThe stemming for ponies and pony might seem\n  strange. Does it have a deleterious effect on retrieval?  Why or why not?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: Faster postings list intersection\n Up: Determining the vocabulary of\n Previous: Other languages.\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}