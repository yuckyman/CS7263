{
  "url": "http://nlp.stanford.edu/IR-book/html/htmledition/phonetic-correction-1.html",
  "title": "Phonetic correction",
  "body": "\n\n\n\n\nPhonetic correction\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: References and further reading\n Up: Dictionaries and tolerant retrieval\n Previous: Context sensitive spelling correction\n    Contents \n    Index\n\n\n\n\n \n\nPhonetic correction\n \nOur final technique for tolerant retrieval has to do with phonetic correction: misspellings that arise because the user types a query that sounds like the target term. Such algorithms are especially applicable to searches on the names of people. The main idea here is to generate, for each term, a ``phonetic hash'' so that similar-sounding terms hash to the same value. The idea owes its origins to work in international police departments from the early 20th century, seeking to match names for wanted criminals despite the names being spelled differently in different countries. It is mainly used to correct phonetic misspellings in proper nouns.\n\n\nAlgorithms for such phonetic hashing are commonly collectively known as  soundex  algorithms. However, there is an original soundex algorithm, with various variants, built on the following scheme:\n\n\nTurn every term to be indexed into a 4-character reduced form. Build an inverted index from these reduced forms to the original terms; call this the soundex index.\n\nDo the same with query terms.\n\nWhen the query calls for a soundex match, search this soundex index.\n\n\nThe variations in different soundex algorithms have to do with the conversion of terms to 4-character forms. A commonly used conversion results in a 4-character code, with the first character being a letter of the alphabet and the other three being digits between 0 and 9.\n\n\nRetain the first letter of the term.\n\nChange all occurrences of the following letters to '0'\n(zero): 'A', E', 'I', 'O', 'U', 'H', 'W', 'Y'.\n\nChange letters to digits as follows:\n\nB, F, P, V to 1.\n\nC, G, J, K, Q, S, X, Z to 2.\n\nD,T to 3.\n\nL to 4.\n\nM, N to 5.\n\nR to 6.\n\nRepeatedly remove one out of each pair of consecutive\nidentical digits.\n\nRemove all zeros from the resulting string.\nPad the resulting string with trailing zeros and return the first four positions, which will consist of a letter followed by three digits.\n\n\n\nFor an example of a soundex map, Hermann maps to H655. Given a query (say herman), we compute its soundex code and then retrieve all vocabulary terms matching this soundex code from the soundex index, before running the resulting query on the standard inverted index.\n\n\nThis algorithm rests on a few observations: (1) vowels are viewed as interchangeable, in transcribing names; (2) consonants with similar sounds (e.g., D and T) are put in equivalence classes. This leads to related names often having the same soundex codes.  While these rules work for many cases, especially European languages, such rules tend to be writing system dependent. For example, Chinese names can be written in Wade-Giles or Pinyin transcription.  While soundex works for some of the differences in the two transcriptions, for instance mapping both Wade-Giles hs and Pinyin x to 2, it fails in other cases, for example Wade-Giles j and Pinyin r are mapped differently.\n\n\nExercises.\n\nFind two differently spelled proper nouns whose soundex codes are the same.\n\n\n\nFind two phonetically similar proper nouns whose soundex codes are different.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Next: References and further reading\n Up: Dictionaries and tolerant retrieval\n Previous: Context sensitive spelling correction\n    Contents \n    Index\n\n\n© 2008 Cambridge University PressThis is an automatically generated page. In case of formatting errors you may want to look at the PDF edition of the book.\n2009-04-07\n\n\n\n"
}